{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifItem.js","components/GiftGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","input","setinput","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGrid","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifItem","console","log","className","src","alt","GiftGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2KAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGlBC,mBAAU,KAHQ,mBAGrCC,EAHqC,KAG9BC,EAH8B,KAgB5C,OAEI,uBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACCJ,EAAMK,OAAOC,OAAS,IACrBR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAeO,OACjCN,EAAS,OAOb,UACI,gDACA,mCAAMD,EAAN,OACA,uBACIQ,KAAO,OACPC,MAAUT,EACVU,SApBc,SAACP,GACvBF,EAASE,EAAEQ,OAAOF,c,+BCLbG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAQD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAeZM,GAfY,4CAAH,sDCDPO,EAAU,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEjC,OADAc,QAAQC,IAAIN,EAAKC,EAAOV,GAEpB,sBAAKgB,UAAY,2CAAjB,UACK,mCAAMN,EAAN,OACD,qBAAKO,IAAKjB,EAAKkB,IAAQR,QCFtBS,EAAW,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECDZ,SAACA,GAAa,IAAD,EAGXd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IALwB,mBAG9BC,EAH8B,KAGvBC,EAHuB,KA6BrC,OArBAC,qBAAU,WAGN1B,EAASC,GAAW0B,MAAK,SAAAC,GAGjBX,QAAQC,IAAIU,GACZH,EAAS,CAELjB,KAAMoB,EACNL,SAAS,SAOtB,IAIIC,EDvBwBK,CAAa5B,GAAhCa,EALwB,EAK7BN,KAAae,EALgB,EAKhBA,QACpB,OACI,qCACI,mCAAMtB,EAAN,OACHsB,GAAW,mBAAGJ,UAAW,0CAAd,uBACR,qBAAKA,UAAY,WAAjB,SAEIL,EAAOJ,KAAK,SAAAC,GAAG,OACf,mCACC,cAAC,EAAD,eAEGA,GADIA,EAAImB,gBEffC,EAAe,WAAO,IAAD,EAIO5C,mBAAS,CAAC,cAJjB,mBAItB6C,EAJsB,KAIV9C,EAJU,KAU9B,OACI,qCACA,kDACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BAGQ8C,EAAWtB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAYA,GADLA,YCdZgC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.8bee2bd8.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n//* MANEJANDO INPUTS \nexport const AddCategory = ({setCategories}) => { \n\n\n    const [input, setinput] = useState((' '));\n    const handleInputChange = (e) => {\n        setinput(e.target.value);\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(input.trim().length > 2 ){\n            setCategories(cats =>  [input,...cats,]);\n            setinput(' ');\n        }\n        \n    }\n\n    return (\n     \n        <form onSubmit = { handleSubmit }>\n            <h2> Add Category </h2>\n            <h1> {input} </h1>\n            <input \n                type = \"text\" \n                value = { input }\n                onChange = { handleInputChange }\n            \n            />\n        </form>\n\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories : PropTypes.func.isRequired,\n}\n","import React from 'react';\n\n\nexport const getGrid = async (category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=CPJHSREtTtyCKZxn6aRIgmAK6LyZxvK4`\n\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs  = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url,\n\n\n        }\n    }); \n    return gifs\n\n}","import React from 'react'\n\nexport const GifItem = ( {id, title, url} ) => {\n    console.log(id , title, url)\n    return (\n        <div className = \"card animate__animated animate__bounceIn\"  >\n             <h1> {title} </h1>\n            <img src={url} alt = { title }></img>\n           \n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifItem } from './GifItem';\nimport { getGrid } from '../helpers/getGifs';\n\nexport const GiftGrid = ({category}) => {\n\n  \n \n    // const [images, setimages] = useState([]);\n    const {data:images, loading} = useFetchGifs(category);\n    return (\n        <>\n            <h3> {category} </h3>\n        {loading && <p className= \"animate__animated animate__bounce flash\"> Loading </p>}\n            <div className = 'cardGrid'>\n          \n               {images.map( img => (\n                <> \n                 <GifItem\n                 key = {img.key}\n                {...img}></GifItem>\n                 \n                </> \n               ))}\n\n\n\n        </div>\n        </> \n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGrid } from \"../helpers/getGifs\"\n\n\nexport const useFetchGifs = (category)=> {\n\n\n    const [state, setstate] = useState({\n        data :[],\n        loading: true,\n\n    })\n    useEffect(() => {\n\n      \n        getGrid( category ).then(imgs =>  {\n            \n      \n                console.log(imgs);\n                setstate({\n            \n                    data: imgs,\n                    loading: false\n                })\n                \n       \n            \n          } )\n\n    }, [])\n\n  \n\n    return state;\n    \n\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GiftGrid } from './components/GiftGrid';\n\n\nexport const GifExpertApp = () => {\n\n    \n\n     const [categories, setCategories] = useState(['One Punch']);\n\n    // const handleAdd = () => {\n\n    //     setCategories([...categories, 'nuevo']);\n    // }\n    return (\n        <>\n        <h2> Gif Expert App </h2>\n        <AddCategory setCategories = { setCategories }  />\n        <hr></hr>\n        \n        <ol>\n            { \n\n                categories.map( category => (\n                    <GiftGrid \n                    key = {category}\n                    category = {category}/>\n                 ) )\n            \n            }\n\n\n\n        </ol>\n\n      </>\n    )\n  }\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GiftExpertApp';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}